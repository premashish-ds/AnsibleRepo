- name: Install Nginx on Ubuntu
  apt:
    name: nginx
    state: present
  when: ansible_distribution == "Ubuntu"

- name: Install Nginx on CentOS
  yum:
    name: nginx
    state: present
  when: ansible_distribution == "CentOS"

- name: Install Jenkins keyring on Ubuntu
  shell: curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null
  when: ansible_distribution == "Ubuntu"

- name: Install Jenkins repository on Ubuntu
  shell: echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null
  when: ansible_distribution == "Ubuntu"

- name: Install openjdk-11-jdk on Ubuntu
  apt:
    name: openjdk-11-jdk
    state: present
  when: ansible_distribution == "Ubuntu"

- name: Update package cache on Ubuntu
  apt:
    update_cache: yes

- name: Install Jenkins on Ubuntu
  apt:
    name: jenkins
    state: present
  when: ansible_distribution == "Ubuntu"
  notify: Restart Nginx

- name: Install Jenkins on CentOS
  yum:
    name: jenkins
    state: present
  when: ansible_distribution == "CentOS"
  
- name: Enable Nginx and Jenkins services
  service:
    name: "{{ item }}"
    enabled: true
    state: started
  loop:
    - nginx
    - jenkins      

- name: Create Nginx configuration directory
  file:
    path: /etc/nginx/conf.d
    state: directory
    mode: '0755'

- name: Copy Nginx configuration template
  copy:
    content: |
      server {
        listen {{ nginx_port }};
        server_name {{ jenkins_hostname }};
        location / {
          proxy_pass http://{{ jenkins_ip }}:{{ jenkins_port }};
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
        }
      }
    dest: /etc/nginx/conf.d/jenkins.conf
    mode: '0644'
    
- name: Reboot the system
  become: true
  command: sudo init 6
  async: 0
  poll: 0
  ignore_errors: true
  changed_when: false
  register: reboot_result

- name: Wait for the system to reboot
  local_action: wait_for
                host={{ inventory_hostname }}
                port=22
                state=stopped
                delay=30
                timeout=3600
  when: reboot_result is not failed
    
